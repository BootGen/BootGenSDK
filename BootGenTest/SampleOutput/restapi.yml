openapi: '3.0.0'
info:
  version: 1.0.0
  title: 'Friends With Pets'
  license:
    name: MIT
servers:
  - url: http://localhost/api
paths:
  /users:
    get:
      security:
      - bearerAuth: []
      summary: retrieve list of users
      operationId: getUsers
      responses:
        '200':
          description: successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      security:
      - bearerAuth: []
      summary: add a new element to the collection
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful insertion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      security:
      - bearerAuth: []
      summary: retrieve users resource
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      security:
      - bearerAuth: []
      summary: update users resource
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful update
    delete:
      security:
      - bearerAuth: []
      summary: delete users resource
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful deletion
  /users/{userId}/pets:
    get:
      security:
      - bearerAuth: []
      summary: retrieve list of pets
      operationId: getPetsOfUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
  /users/{userId}/pets/{petId}:
    get:
      security:
      - bearerAuth: []
      summary: retrieve pets resource
      operationId: getPetOfUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /users/{userId}/friends:
    get:
      security:
      - bearerAuth: []
      summary: retrieve list of friends
      operationId: getFriendsOfUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      security:
      - bearerAuth: []
      summary: add a new element to the collection
      operationId: addFriendToUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful insertion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}/friends/{friendId}:
    get:
      security:
      - bearerAuth: []
      summary: retrieve friends resource
      operationId: getFriendOfUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      security:
      - bearerAuth: []
      summary: delete friends resource
      operationId: deleteFriendOfUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful deletion
  /pets:
    get:
      security:
      - bearerAuth: []
      summary: retrieve list of pets
      operationId: getPets
      responses:
        '200':
          description: successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
    post:
      security:
      - bearerAuth: []
      summary: add a new element to the collection
      operationId: addPet
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: successful insertion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /pets/{petId}:
    get:
      security:
      - bearerAuth: []
      summary: retrieve pets resource
      operationId: getPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    put:
      security:
      - bearerAuth: []
      summary: update pets resource
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: successful update
    delete:
      security:
      - bearerAuth: []
      summary: delete pets resource
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful deletion
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        name:
          type: string
    Pet:
      type: object
      required:
        - id
        - name
        - kind
        - user_id
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        name:
          type: string
        kind:
          type: string
          enum: ['Dog', 'Cat', 'Bird', 'Fish']
        user_id:
          type: integer
          format: int32
