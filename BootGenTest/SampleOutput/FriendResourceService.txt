/* 
 * Generated by BootGen https://github.com/BootGen/BootGenVue
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;

namespace UsersWithFriends.Services
{
    public class UsersFriendsService : IUsersFriendsService
    {
        public User CurrentUser { get; set; }
        
        public ServiceResponse<List<User>> GetFriends([FromRoute] int userId)
        {
            using (var db = new DataContext())
            {
                var parent = db.Users.Where(item => item.Id == userId).First();
                var result = db.UserPivots
                                .Where(item => item.UserId == parent.Id)
                                .Select(item => item.Friend)
                                .ToList();
                return new ServiceResponse<List<User>>
                {
                    StatusCode = 200,
                    ResponseData = result
                };
            }
        }

        public ServiceResponse<User> AddFriend([FromRoute] int userId, [FromBody] User friend)
        {
            using (var db = new DataContext())
            {
                var parent = db.Users.Where(item => item.Id == userId).First();
                db.UserPivots.Add(new UserPivot{ UserId = parent.Id, FriendId = friend.Id });
                db.SaveChanges();
            }
            return new ServiceResponse<User>
            {
                StatusCode = 200,
                ResponseData = null
            };
        }

        public ServiceResponse RemoveFriend([FromRoute] int userId, [FromRoute] int friendId)
        {
            using (var db = new DataContext())
            {
                var parent = db.Users.Where(item => item.Id == userId).First();
                var assigned = db.Users.Where(item => item.Id == friendId).First();
                db.UserPivots.RemoveRange(db.UserPivots.Where(item => item.UserId == parent.Id && item.FriendId == assigned.Id));
                db.SaveChanges();
            }
            return new ServiceResponse
            {
                StatusCode = 200
            };
        }
    }
}
