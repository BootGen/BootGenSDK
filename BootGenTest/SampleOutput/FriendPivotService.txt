/* 
 * Generated by BootGen https://github.com/BootGen/BootGenVue
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;

namespace UsersWithFriends.Services
{
    public class UserPivotsService : IUserPivotsService
    {
        public ServiceResponse<List<User>> GetUsersOfUser(int userId)
        {
            using (var db = new DataContext())
            {
                var parent = db.Users.Where(item => item.Id == userId).FirstOrDefault();
                if (parent == null)
                    return new ServiceResponse<List<User>>
                    {
                        StatusCode = 400
                    };
                var result = db.UserPivots
                                .Include("User")
                                .Where(item => item.UserId == parent.Id)
                                .Select(item => item.User)
                                .ToList();
                return new ServiceResponse<List<User>>
                {
                    StatusCode = 200,
                    ResponseData = result
                };
            }
        }

        public ServiceResponse<List<User>> GetUsersOfUser(int userId)
        {
            using (var db = new DataContext())
            {
                var parent = db.Users.Where(item => item.Id == userId).FirstOrDefault();
                if (parent == null)
                    return new ServiceResponse<List<User>>
                    {
                        StatusCode = 400
                    };
                var result = db.UserPivots
                                .Include("User")
                                .Where(item => item.UserId == parent.Id)
                                .Select(item => item.User)
                                .ToList();
                return new ServiceResponse<List<User>>
                {
                    StatusCode = 200,
                    ResponseData = result
                };
            }
        }

        public ServiceResponse Assign(int userId, int userId)
        {
            try
            {
                using (var db = new DataContext())
                {
                    db.UserPivots.Add(new UserPivot{ UserId = userId, UserId = userId });
                    db.SaveChanges();
                    return new ServiceResponse
                    {
                        StatusCode = 200,
                    };
                }
            } catch (DbUpdateException)
            {
                return new ServiceResponse
                {
                    StatusCode = 400
                };
            }
        }

        public ServiceResponse Remove(int userId, int userId)
        {
            try
            {
                using (var db = new DataContext())
                {
                    db.UserPivots.RemoveRange(db.UserPivots.Where(item => item.UserId == userId && item.UserId == userId));
                    db.SaveChanges();
                }
            } catch (DbUpdateException)
            {
                return new ServiceResponse
                {
                    StatusCode = 400
                };
            }
            return new ServiceResponse
            {
                StatusCode = 200
            };
        }
    }
}
