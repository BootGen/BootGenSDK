import Vue from 'vue'
import Vuex from 'vuex'
import axios from 'axios'
import { User } from '@/models/User'
import { Pet } from '@/models/Pet'

Vue.use(Vuex)

axios.defaults.baseURL = "http://localhost/api"

const dateFormat = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/;

function reviver(key: string, value: string) {
  if (typeof value === "string" && dateFormat.test(value)) {
    return new Date(value);
  }
  return value;
}

function transformResponse(response: string) {
  if (response && response.trim()) {
    return JSON.parse(response, reviver);
  }
  return null;
}

function config(context: any) {
  return {headers: {'Authorization': 'Bearer ' + context.state.jwt}, transformResponse: transformResponse };
}

interface EntityWithId {
  id: number;
}

function setItem<T extends EntityWithId>(array: Array<T>, item: T): T {
  const oldItem = array.find(i => i.id == item.id);
  if (oldItem) {
    Object.assign(oldItem, item);
    return oldItem;
  } else {
    array.push(item);
    return item;
  }
}

function setArray<T extends EntityWithId>(target: Array<T>, source: Array<T>): Array<T> {
  const result = Array<T>();
  source.forEach(item =>{
    const oldItem = target.find(i => i.id == item.id);
    if (oldItem) {
      Object.assign(oldItem, item);
      result.push(oldItem);
    } else {
      result.push(item);
    }
  });
  return result;
}

function patchArray<T extends EntityWithId>(target: Array<T>, source: Array<T>) {
  source.forEach(item =>{
    setItem(target, item);
  });
}

function findById<T extends EntityWithId>(array: Array<T>, id: number): T | undefined {
  return array.find(i => i.id === id);
}

export default new Vuex.Store({
  state: {
    users: Array<User>(),
    jwt: ""
  },
  mutations: {
    setUsers: function(state, users) {
      state.users = setArray(state.users,users);
    },
    patchUsers: function(state, users) {
      patchArray(state.users,users);
    },
    setUser: function(state, user) {
      setItem(state.users, user);
    },
    init: function(state) {
      const jwt = localStorage.getItem("jwt")
      if (jwt) {
        state.jwt = jwt;
      }
    },
    setJwt: function(state, jwt) {
      state.jwt = jwt
      localStorage.setItem("jwt", jwt);
    }
  },
  actions: {
    getUsers: function(context): Promise<Array<User>> {
      return new Promise((resolve, reject) => {
        axios.get(`users`, config(context)).then(response => {
          context.commit("setUsers", response.data);
          resolve(context.state.users);
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    getUser: function(context, id): Promise<User> {
      return new Promise((resolve, reject) => {
        axios.get(`users/${id}`, config(context)).then(response => {
          context.commit("setUser", response.data);
          resolve(findById(context.state.users, response.data.id));
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    addUser: function(context, user): Promise<User> {

      return new Promise((resolve, reject) => {
        axios.post(`users`, user, config(context)).then(response => {
          context.commit("setUser", response.data);
          const savedItem = findById(context.state.users, response.data.id);
          resolve(savedItem);
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    updateUser: function(context, user): Promise<User> {

      return new Promise((resolve, reject) => {
        axios.put(`users/${user.id}`, user, config(context)).then(response => {
          context.commit("setUser", response.data);
          resolve(findById(context.state.users, response.data.id));
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    deleteUser: function(context, user): Promise<void> {
      context.commit("setUsers", context.state.users.filter(i => i !== user));

      return new Promise((resolve, reject) => {
        axios.delete(`users/${user.id}`, config(context)).then(() => {
          resolve()
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    getFriendsOfUser: function(context, user): Promise<Array<User>> {
      return new Promise((resolve, reject) => {
        axios.get(`users/${user.id}/friends`, config(context)).then(response => {
          context.commit("patchUsers", response.data);
          const storedArray = Array<User>();
          response.data.forEach((item: User) => {
            const storedUser = findById(context.state.friends, item.id);
            if (storedUser) {
              storedArray.push(storedUser);
            }
          });
          Vue.set(user, "friends", storedArray);
          context.commit("setUser",user);
          resolve(storedArray);
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    addFriendToUser: function(context, data): Promise<User> {
      const friend: User = data.friend;
      const user: User = data.user;

      return new Promise((resolve, reject) => {
        axios.post(`users/${user.id}/friends`, friend, config(context)).then(response => {
          context.commit("setUser", response.data);
          const savedItem = findById(context.state.users, response.data.id);
          if (savedItem) {
            user.friends.push(savedItem);
            context.commit("setUser", user);
          }
          resolve(savedItem);
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    deleteFriendOfUser: function(context, data): Promise<void> {
      const friend: User = data.friend;
      const user: User = data.user;
      user.friends = user.friends.filter(i => i !== friend);
      context.commit("setUser", user);
      context.commit("setUsers", context.state.users.filter(i => i !== friend));

      return new Promise((resolve, reject) => {
        axios.delete(`users/${user.id}/friends/${friend.id}`, config(context)).then(() => {
          resolve()
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    getPetsOfUser: function(context, user): Promise<Array<Pet>> {
      return new Promise((resolve, reject) => {
        axios.get(`users/${user.id}/pets`, config(context)).then(response => {
          Vue.set(user, "pets", response.data);
          context.commit("setUser",user);
          resolve(response.data);
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    getPetOfUser: function(context, data): Promise<Pet> {
      const id = data.id;
      const user: User = data.user;
      
      return new Promise((resolve, reject) => {
        axios.get(`users/${user.id}/pets/${id}`, config(context)).then(response => {
          resolve(setItem(user.pets, response.data));
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    addPetToUser: function(context, data): Promise<Pet> {
      const pet: Pet = data.pet;
      const user: User = data.user;

      return new Promise((resolve, reject) => {
        axios.post(`users/${user.id}/pets`, pet, config(context)).then(response => {
          user.pets.push(response.data);
          context.commit("setUser", user);
          resolve(response.data);
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    updatePetOfUser: function(context, data): Promise<Pet> {
      const pet: Pet = data.pet;
      const user: User = data.user;

      return new Promise((resolve, reject) => {
        axios.put(`users/${user.id}/pets/${pet.id}`, pet, config(context)).then(response => {
          resolve(setItem(user.pets, response.data));
        }).catch(reason => {
          reject(reason);
        })
      })
    },
    deletePetOfUser: function(context, data): Promise<void> {
      const pet: Pet = data.pet;
      const user: User = data.user;
      user.pets = user.pets.filter(i => i !== pet);
      context.commit("setUser", user);

      return new Promise((resolve, reject) => {
        axios.delete(`users/${user.id}/pets/${pet.id}`, config(context)).then(() => {
          resolve()
        }).catch(reason => {
          reject(reason);
        })
      })
    },
  },
  modules: {
  }
})
