/* 
 * Generated by BootGen https://github.com/BootGen/BootGenVue
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;

namespace {{ name_space }}.Services
{
    public class {{ service_name resource }} : I{{ service_name resource }}
    {
        {{~ if resource.authenticate ~}}
        public User CurrentUser { get; set; }
        
        {{~ end ~}}
        public ServiceResponse<List<{{ resource.class.name }}>> Get{{ resource.plural_name }}({{ get_parameters resource }})
        {
            using (var db = new DataContext())
            {
                {{~
                parent = resource.parent_resource
                ~}}
                var parent = db.{{ parent.plural_name }}.Where(item => item.Id == {{ lower_case parent.name }}Id).First();
                var result = db.{{ resource.pivot.name }}s
                                {{~ for property in (get_properties_to_load resource.class) ~}}
                                .Include("{{ property }}")
                                {{~ end ~}}
                                .Where(item => item.{{ parent.name }}Id == parent.Id)
                                .Select(item => item.{{ resource.name }})
                                .ToList();
                return new ServiceResponse<List<{{ resource.class.name }}>>
                {
                    StatusCode = 200,
                    ResponseData = result
                };
            }
        }
        {{~ if !resource.is_readonly ~}}

        public ServiceResponse<{{ resource.class.name }}> Add{{ resource.name }}({{ post_parameters resource }})
        {
            using (var db = new DataContext())
            {
                {{~
                parent = resource.parent_resource
                ~}}
                var parent = db.{{ parent.plural_name }}.Where(item => item.Id == {{ lower_case parent.name }}Id).First();
                db.{{ resource.pivot.name }}s.Add(new {{ resource.pivot.name }}{ {{ parent.name }}Id = parent.Id, {{ resource.name }}Id = {{ lower_case resource.name }}.Id });
                db.SaveChanges();
            }
            return new ServiceResponse<{{ resource.class.name }}>
            {
                StatusCode = 200,
                ResponseData = null
            };
        }

        public ServiceResponse Remove{{ resource.name }}({{ item_delete_parameters resource }})
        {
            using (var db = new DataContext())
            {
                {{~
                parent = resource.parent_resource
                ~}}
                var parent = db.{{ parent.plural_name }}.Where(item => item.Id == {{ lower_case parent.name }}Id).First();
                var assigned = db.{{ resource.class.name }}s.Where(item => item.Id == {{ lower_case resource.name }}Id).First();
                db.{{ resource.pivot.name }}s.RemoveRange(db.{{ resource.pivot.name }}s.Where(item => item.{{ parent.name }}Id == parent.Id && item.{{ resource.name }}Id == assigned.Id));
                db.SaveChanges();
            }
            return new ServiceResponse
            {
                StatusCode = 200
            };
        }
        {{~ end ~}}
    }
}
