/* 
 * Generated by BootGen https://github.com/BootGen/BootGenVue
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace {{ name_space }}.Services
{
    public class {{ service_name resource }} : I{{ service_name resource }}
    {
        {{~ if resource.authenticate ~}}
        public User CurrentUser { get; set; }

        {{~ end ~}}
        public ServiceResponse<List<{{ resource.class.name }}>> Get{{ resource.plural_name }}({{ get_parameters_service resource }})
        {
            using (var db = new DataContext())
            {
                {{~
                parent = resource.parent_resource
                ~}}
                var query = db.{{ resource.class.plural_name }}{{ for property in (get_properties_to_load resource.class) }}
                                .Include("{{ property }}"){{ end }}{{ if parent }}
                                .Where(item => item.{{ parent_id_name resource }} == {{ camel_case parent.class.name }}Id){{ end }};
                return new ServiceResponse<List<{{ resource.class.name }}>>
                {
                    StatusCode = 200,
                    ResponseData = query.ToList()
                };
            }
        }

        public ServiceResponse<{{ resource.class.name }}> Get{{ resource.name }}({{ item_get_parameters_service resource }})
        {
            using (var db = new DataContext())
            {
                var item = db.{{ resource.class.plural_name }}
                             {{~ for property in (get_properties_to_load resource.class) ~}}
                             .Include("{{ property }}")
                             {{~ end ~}}
                             .Where(item => item.Id == {{ camel_case resource.name }}Id).FirstOrDefault();
                if (item == null)
                    return new ServiceResponse<{{ resource.class.name }}>
                    {
                        StatusCode = 404
                    };
                return new ServiceResponse<{{ resource.class.name }}>
                {
                    StatusCode = 200,
                    ResponseData = item
                };
            }
        }
        {{~ if !resource.is_readonly ~}}

        public ServiceResponse<{{ resource.class.name }}> Add{{ resource.name }}({{ post_parameters_service resource }})
        {
            {{~ if resource.has_timestamps ~}}
            {{ camel_case resource.name }}.Created = DateTime.Now;
            {{ camel_case resource.name }}.Updated = DateTime.Now;
            {{~ end ~}}
            {{~
            parent = resource.parent_resource
            ~}}
            {{~ if parent ~}}
            {{ camel_case resource.name }}.{{ parent_id_name resource }} = {{ camel_case parent.class.name }}Id;
            {{~ end ~}}
            EntityEntry<{{ resource.class.name }}> entityEntry;
            using (var db = new DataContext())
            {
                entityEntry = db.{{ resource.class.plural_name }}.Add({{ camel_case resource.name }});
                db.SaveChanges();
            }
            return new ServiceResponse<{{ resource.class.name }}>
            {
                StatusCode = 200,
                ResponseData = entityEntry.Entity
            };
        }

        public ServiceResponse<{{ resource.class.name }}> Update{{ resource.name }}({{ item_put_parameters_service resource }})
        {
            using (var db = new DataContext())
            {
                var original = db.{{ resource.class.plural_name }}
                            {{~ for property in (get_properties_to_load resource.class) ~}}
                            .Include("{{ property }}")
                            {{~ end ~}}
                            .Where(item => item.Id == {{ camel_case resource.name }}Id).FirstOrDefault();
                {{~ if resource.has_timestamps ~}}
                {{ camel_case resource.name }}.Updated = DateTime.Now;
                {{~ end ~}}
                EntityEntry<{{ resource.class.name }}> entityEntry;
                entityEntry = db.{{ resource.class.plural_name }}.Update(original);
                {{~ for property in resource.class.common_properties ~}}
                {{~ if !property.is_client_readonly ~}}
                original.{{property.name}} = {{ camel_case resource.name }}.{{property.name}};
                {{~ end ~}}
                {{~ end ~}}
                db.SaveChanges();
                return new ServiceResponse<{{ resource.class.name }}>
                {
                    StatusCode = 200,
                    ResponseData = entityEntry.Entity
                };
            }
        }

        public ServiceResponse Delete{{ resource.name }}({{ item_delete_parameters_service resource }})
        {
            using (var db = new DataContext())
            {
                var item = db.{{ resource.class.plural_name }}.Where(item => item.Id == {{ camel_case resource.name }}Id).First();
                db.{{ resource.class.plural_name }}.Remove(item);
                db.SaveChanges();
            }
            return new ServiceResponse
            {
                StatusCode = 200
            };
        }
        {{~ end ~}}
    }
}
