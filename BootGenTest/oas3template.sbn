openapi: '3.0.0'
info:
  version: {{ api.version }}
  title: {{ api.title }}
  license:
    name: {{ api.licence }}
servers:
  - url: {{ api.url }}
paths:
  {{~ for route in api.routes ~}}
  {{ route.path }}:
  {{~ for operation in route.operations ~}}
    {{ operation.method }}:
      summary: {{ operation.summary }}
      operationId: {{ operation.name }}
      {{~ if operation.has_parameters ~}}
      parameters:
      {{~ for parameter in operation.parameters ~}}
        - name: {{ parameter.name }}
          in: {{ parameter.kind }}
          required: {{ parameter.required }}
          schema:
            type: {{ parameter.type }}
            {{~ if parameter.format ~}}
            format: {{ parameter.format }}
            {{~ end ~}}
        {{~ end ~}}
      {{~ end ~}}
      {{~ if operation.body ~}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
            {{~ if operation.body_is_collection ~}}
                type: array
                items:
                  $ref: '#/components/schemas/{{operation.body}}'
            {{~ else ~}}
                $ref: '#/components/schemas/{{operation.body}}'
            {{~ end ~}}
      {{~ end ~}}
      responses:
        '{{ operation.success_code }}':
          description: {{ operation.success_description }}
          {{~ if operation.response ~}}
          content:
            application/json:
              schema:
            {{~ if operation.response_is_collection ~}}
                type: array
                items:
                  $ref: '#/components/schemas/{{operation.response}}'
            {{~ else ~}}
                $ref: '#/components/schemas/{{operation.response}}'
            {{~ end ~}}
          {{~ end ~}}
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    {{~ end ~}}
    {{~ end ~}}
components:
  schemas:
  {{~ for schema in api.schemas ~}}
    {{ schema.name }}:
      type: object
      {{~ if schema.has_required_properties ~}}
      required:
        {{~ for property in schema.properties ~}}
        {{~ if property.required ~}}
        - {{ property.name }}
        {{~ end ~}}
        {{~ end ~}}
      {{~ end ~}}
      properties:
      {{~ for property in schema.properties ~}}
        {{ property.name }}:
          {{~ if property.is_collection ~}}
          type: array
          items:
            {{~ if property.reference ~}}
            $ref: '#/components/schemas/{{ property.reference }}'
            {{~ else ~}}
            type: {{ property.type }}
            {{~ if property.format ~}}
            format: {{ property.format }}
            {{~ end ~}}
            {{~ end ~}}
          {{~ else ~}}
          {{~ if property.reference ~}}
          $ref: '#/components/schemas/{{ property.reference }}'
          {{~ else ~}}
          type: {{ property.type }}
          {{~ if property.format ~}}
          format: {{ property.format }}
          {{~ end ~}}
          {{~ end ~}}
          {{~ end ~}}
      {{~ end ~}}
  {{~ end ~}}
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
